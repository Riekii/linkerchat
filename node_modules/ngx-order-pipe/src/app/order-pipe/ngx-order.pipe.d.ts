import { PipeTransform } from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export declare class OrderPipe implements PipeTransform {
    /**
     * Check if a value is a string
     *
     * @param value
     */
    static isString(value: any): boolean;
    /**
     * Sorts values ignoring the case
     *
     * @param a
     * @param b
     */
    static caseInsensitiveSort(a: any, b: any): any;
    /**
     * Default compare method
     *
     * @param a
     * @param b
     */
    static defaultCompare(a: any, b: any): 0 | 1 | -1;
    /**
     * Parse expression, split into items
     * @param expression
     * @returns {string[]}
     */
    static parseExpression(expression: string): string[];
    /**
     * Get value by expression
     *
     * @param object
     * @param expression
     * @returns {any}
     */
    static getValue(object: any, expression: string[]): any;
    /**
     * Set value by expression
     *
     * @param object
     * @param value
     * @param expression
     */
    static setValue(object: any, value: any, expression: string[]): void;
    transform(value: any | any[], expression?: any, reverse?: boolean, isCaseInsensitive?: boolean, comparator?: Function): any;
    /**
     * Sort array
     *
     * @param value
     * @param expression
     * @param reverse
     * @param isCaseInsensitive
     * @param comparator
     * @returns {any[]}
     */
    private sortArray;
    /**
     * Transform Object
     *
     * @param value
     * @param expression
     * @param reverse
     * @param isCaseInsensitive
     * @param comparator
     * @returns {any[]}
     */
    private transformObject;
    /**
     * Apply multiple expressions
     *
     * @param value
     * @param {any[]} expressions
     * @param {boolean} reverse
     * @param {boolean} isCaseInsensitive
     * @param {Function} comparator
     * @returns {any}
     */
    private multiExpressionTransform;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OrderPipe>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<OrderPipe, "orderBy">;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW9yZGVyLnBpcGUuZC50cyIsInNvdXJjZXMiOlsibmd4LW9yZGVyLnBpcGUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgT3JkZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYSB2YWx1ZSBpcyBhIHN0cmluZ1xuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgc3RhdGljIGlzU3RyaW5nKHZhbHVlOiBhbnkpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNvcnRzIHZhbHVlcyBpZ25vcmluZyB0aGUgY2FzZVxuICAgICAqXG4gICAgICogQHBhcmFtIGFcbiAgICAgKiBAcGFyYW0gYlxuICAgICAqL1xuICAgIHN0YXRpYyBjYXNlSW5zZW5zaXRpdmVTb3J0KGE6IGFueSwgYjogYW55KTogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmF1bHQgY29tcGFyZSBtZXRob2RcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhXG4gICAgICogQHBhcmFtIGJcbiAgICAgKi9cbiAgICBzdGF0aWMgZGVmYXVsdENvbXBhcmUoYTogYW55LCBiOiBhbnkpOiAwIHwgMSB8IC0xO1xuICAgIC8qKlxuICAgICAqIFBhcnNlIGV4cHJlc3Npb24sIHNwbGl0IGludG8gaXRlbXNcbiAgICAgKiBAcGFyYW0gZXhwcmVzc2lvblxuICAgICAqIEByZXR1cm5zIHtzdHJpbmdbXX1cbiAgICAgKi9cbiAgICBzdGF0aWMgcGFyc2VFeHByZXNzaW9uKGV4cHJlc3Npb246IHN0cmluZyk6IHN0cmluZ1tdO1xuICAgIC8qKlxuICAgICAqIEdldCB2YWx1ZSBieSBleHByZXNzaW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2JqZWN0XG4gICAgICogQHBhcmFtIGV4cHJlc3Npb25cbiAgICAgKiBAcmV0dXJucyB7YW55fVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRWYWx1ZShvYmplY3Q6IGFueSwgZXhwcmVzc2lvbjogc3RyaW5nW10pOiBhbnk7XG4gICAgLyoqXG4gICAgICogU2V0IHZhbHVlIGJ5IGV4cHJlc3Npb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmplY3RcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAcGFyYW0gZXhwcmVzc2lvblxuICAgICAqL1xuICAgIHN0YXRpYyBzZXRWYWx1ZShvYmplY3Q6IGFueSwgdmFsdWU6IGFueSwgZXhwcmVzc2lvbjogc3RyaW5nW10pOiB2b2lkO1xuICAgIHRyYW5zZm9ybSh2YWx1ZTogYW55IHwgYW55W10sIGV4cHJlc3Npb24/OiBhbnksIHJldmVyc2U/OiBib29sZWFuLCBpc0Nhc2VJbnNlbnNpdGl2ZT86IGJvb2xlYW4sIGNvbXBhcmF0b3I/OiBGdW5jdGlvbik6IGFueTtcbiAgICAvKipcbiAgICAgKiBTb3J0IGFycmF5XG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAcGFyYW0gZXhwcmVzc2lvblxuICAgICAqIEBwYXJhbSByZXZlcnNlXG4gICAgICogQHBhcmFtIGlzQ2FzZUluc2Vuc2l0aXZlXG4gICAgICogQHBhcmFtIGNvbXBhcmF0b3JcbiAgICAgKiBAcmV0dXJucyB7YW55W119XG4gICAgICovXG4gICAgcHJpdmF0ZSBzb3J0QXJyYXk7XG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtIE9iamVjdFxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICogQHBhcmFtIGV4cHJlc3Npb25cbiAgICAgKiBAcGFyYW0gcmV2ZXJzZVxuICAgICAqIEBwYXJhbSBpc0Nhc2VJbnNlbnNpdGl2ZVxuICAgICAqIEBwYXJhbSBjb21wYXJhdG9yXG4gICAgICogQHJldHVybnMge2FueVtdfVxuICAgICAqL1xuICAgIHByaXZhdGUgdHJhbnNmb3JtT2JqZWN0O1xuICAgIC8qKlxuICAgICAqIEFwcGx5IG11bHRpcGxlIGV4cHJlc3Npb25zXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge2FueVtdfSBleHByZXNzaW9uc1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmV2ZXJzZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNDYXNlSW5zZW5zaXRpdmVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yXG4gICAgICogQHJldHVybnMge2FueX1cbiAgICAgKi9cbiAgICBwcml2YXRlIG11bHRpRXhwcmVzc2lvblRyYW5zZm9ybTtcbn1cbiJdfQ==