import { NgZone, InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import { performance } from 'firebase/app';
import { FirebaseApp, ɵPromiseProxy } from '@angular/fire';
import * as ɵngcc0 from '@angular/core';
export declare const AUTOMATICALLY_TRACE_CORE_NG_METRICS: InjectionToken<boolean>;
export declare const INSTRUMENTATION_ENABLED: InjectionToken<boolean>;
export declare const DATA_COLLECTION_ENABLED: InjectionToken<boolean>;
export interface AngularFirePerformance extends ɵPromiseProxy<performance.Performance> {
}
export declare class AngularFirePerformance {
    private zone;
    private readonly performance;
    constructor(app: FirebaseApp, instrumentationEnabled: boolean | null, dataCollectionEnabled: boolean | null, zone: NgZone, platformId: Object);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFirePerformance>;
}
export declare const traceUntil: <T = any>(name: string, test: (a: T) => boolean, options?: {
    orComplete?: boolean;
}) => (source$: Observable<T>) => Observable<T>;
export declare const traceWhile: <T = any>(name: string, test: (a: T) => boolean, options?: {
    orComplete?: boolean;
}) => (source$: Observable<T>) => Observable<T>;
export declare const traceUntilComplete: <T = any>(name: string) => (source$: Observable<T>) => Observable<T>;
export declare const traceUntilFirst: <T = any>(name: string) => (source$: Observable<T>) => Observable<T>;
export declare const trace: <T = any>(name: string) => (source$: Observable<T>) => Observable<T>;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWFuY2UuZC50cyIsInNvdXJjZXMiOlsicGVyZm9ybWFuY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7OztBQVNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdab25lLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgcGVyZm9ybWFuY2UgfSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgRmlyZWJhc2VBcHAsIMm1UHJvbWlzZVByb3h5IH0gZnJvbSAnQGFuZ3VsYXIvZmlyZSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBBVVRPTUFUSUNBTExZX1RSQUNFX0NPUkVfTkdfTUVUUklDUzogSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBJTlNUUlVNRU5UQVRJT05fRU5BQkxFRDogSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBEQVRBX0NPTExFQ1RJT05fRU5BQkxFRDogSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj47XG5leHBvcnQgaW50ZXJmYWNlIEFuZ3VsYXJGaXJlUGVyZm9ybWFuY2UgZXh0ZW5kcyDJtVByb21pc2VQcm94eTxwZXJmb3JtYW5jZS5QZXJmb3JtYW5jZT4ge1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQW5ndWxhckZpcmVQZXJmb3JtYW5jZSB7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgcGVyZm9ybWFuY2U7XG4gICAgY29uc3RydWN0b3IoYXBwOiBGaXJlYmFzZUFwcCwgaW5zdHJ1bWVudGF0aW9uRW5hYmxlZDogYm9vbGVhbiB8IG51bGwsIGRhdGFDb2xsZWN0aW9uRW5hYmxlZDogYm9vbGVhbiB8IG51bGwsIHpvbmU6IE5nWm9uZSwgcGxhdGZvcm1JZDogT2JqZWN0KTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHRyYWNlVW50aWw6IDxUID0gYW55PihuYW1lOiBzdHJpbmcsIHRlc3Q6IChhOiBUKSA9PiBib29sZWFuLCBvcHRpb25zPzoge1xuICAgIG9yQ29tcGxldGU/OiBib29sZWFuO1xufSkgPT4gKHNvdXJjZSQ6IE9ic2VydmFibGU8VD4pID0+IE9ic2VydmFibGU8VD47XG5leHBvcnQgZGVjbGFyZSBjb25zdCB0cmFjZVdoaWxlOiA8VCA9IGFueT4obmFtZTogc3RyaW5nLCB0ZXN0OiAoYTogVCkgPT4gYm9vbGVhbiwgb3B0aW9ucz86IHtcbiAgICBvckNvbXBsZXRlPzogYm9vbGVhbjtcbn0pID0+IChzb3VyY2UkOiBPYnNlcnZhYmxlPFQ+KSA9PiBPYnNlcnZhYmxlPFQ+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgdHJhY2VVbnRpbENvbXBsZXRlOiA8VCA9IGFueT4obmFtZTogc3RyaW5nKSA9PiAoc291cmNlJDogT2JzZXJ2YWJsZTxUPikgPT4gT2JzZXJ2YWJsZTxUPjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHRyYWNlVW50aWxGaXJzdDogPFQgPSBhbnk+KG5hbWU6IHN0cmluZykgPT4gKHNvdXJjZSQ6IE9ic2VydmFibGU8VD4pID0+IE9ic2VydmFibGU8VD47XG5leHBvcnQgZGVjbGFyZSBjb25zdCB0cmFjZTogPFQgPSBhbnk+KG5hbWU6IHN0cmluZykgPT4gKHNvdXJjZSQ6IE9ic2VydmFibGU8VD4pID0+IE9ic2VydmFibGU8VD47XG4iXX0=