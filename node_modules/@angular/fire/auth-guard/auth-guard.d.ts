import { NgZone } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';
import { Observable, UnaryFunction } from 'rxjs';
import { User } from 'firebase/app';
import { FirebaseOptions, FirebaseAppConfig } from '@angular/fire';
import * as ɵngcc0 from '@angular/core';
export declare type AuthPipeGenerator = (next: ActivatedRouteSnapshot, state: RouterStateSnapshot) => AuthPipe;
export declare type AuthPipe = UnaryFunction<Observable<User | null>, Observable<boolean | any[]>>;
export declare class AngularFireAuthGuard implements CanActivate {
    private router;
    authState: Observable<User | null>;
    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, zone: NgZone, router: Router);
    canActivate: (next: ActivatedRouteSnapshot, state: RouterStateSnapshot) => Observable<boolean | import("@angular/router").UrlTree>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFireAuthGuard>;
}
export declare const canActivate: (pipe: AuthPipeGenerator) => {
    canActivate: (typeof AngularFireAuthGuard)[];
    data: {
        authGuardPipe: AuthPipeGenerator;
    };
};
export declare const loggedIn: AuthPipe;
export declare const isNotAnonymous: AuthPipe;
export declare const idTokenResult: import("rxjs").OperatorFunction<User, any>;
export declare const emailVerified: AuthPipe;
export declare const customClaims: UnaryFunction<Observable<User>, Observable<any>>;
export declare const hasCustomClaim: (claim: string) => UnaryFunction<Observable<User>, Observable<any>>;
export declare const redirectUnauthorizedTo: (redirect: any[]) => UnaryFunction<Observable<User>, Observable<true | any[]>>;
export declare const redirectLoggedInTo: (redirect: any[]) => UnaryFunction<Observable<User>, Observable<true | any[]>>;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ndWFyZC5kLnRzIiwic291cmNlcyI6WyJhdXRoLWd1YXJkLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUtBOzs7Ozs7OztBQU9BIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYW5BY3RpdmF0ZSwgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyU3RhdGVTbmFwc2hvdCwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFVuYXJ5RnVuY3Rpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgRmlyZWJhc2VPcHRpb25zLCBGaXJlYmFzZUFwcENvbmZpZyB9IGZyb20gJ0Bhbmd1bGFyL2ZpcmUnO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBBdXRoUGlwZUdlbmVyYXRvciA9IChuZXh0OiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCkgPT4gQXV0aFBpcGU7XG5leHBvcnQgZGVjbGFyZSB0eXBlIEF1dGhQaXBlID0gVW5hcnlGdW5jdGlvbjxPYnNlcnZhYmxlPFVzZXIgfCBudWxsPiwgT2JzZXJ2YWJsZTxib29sZWFuIHwgYW55W10+PjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFuZ3VsYXJGaXJlQXV0aEd1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUge1xuICAgIHByaXZhdGUgcm91dGVyO1xuICAgIGF1dGhTdGF0ZTogT2JzZXJ2YWJsZTxVc2VyIHwgbnVsbD47XG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogRmlyZWJhc2VPcHRpb25zLCBuYW1lT3JDb25maWc6IHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnIHwgbnVsbCB8IHVuZGVmaW5lZCwgem9uZTogTmdab25lLCByb3V0ZXI6IFJvdXRlcik7XG4gICAgY2FuQWN0aXZhdGU6IChuZXh0OiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCkgPT4gT2JzZXJ2YWJsZTxib29sZWFuIHwgaW1wb3J0KFwiQGFuZ3VsYXIvcm91dGVyXCIpLlVybFRyZWU+O1xufVxuZXhwb3J0IGRlY2xhcmUgY29uc3QgY2FuQWN0aXZhdGU6IChwaXBlOiBBdXRoUGlwZUdlbmVyYXRvcikgPT4ge1xuICAgIGNhbkFjdGl2YXRlOiAodHlwZW9mIEFuZ3VsYXJGaXJlQXV0aEd1YXJkKVtdO1xuICAgIGRhdGE6IHtcbiAgICAgICAgYXV0aEd1YXJkUGlwZTogQXV0aFBpcGVHZW5lcmF0b3I7XG4gICAgfTtcbn07XG5leHBvcnQgZGVjbGFyZSBjb25zdCBsb2dnZWRJbjogQXV0aFBpcGU7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBpc05vdEFub255bW91czogQXV0aFBpcGU7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBpZFRva2VuUmVzdWx0OiBpbXBvcnQoXCJyeGpzXCIpLk9wZXJhdG9yRnVuY3Rpb248VXNlciwgYW55PjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGVtYWlsVmVyaWZpZWQ6IEF1dGhQaXBlO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgY3VzdG9tQ2xhaW1zOiBVbmFyeUZ1bmN0aW9uPE9ic2VydmFibGU8VXNlcj4sIE9ic2VydmFibGU8YW55Pj47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBoYXNDdXN0b21DbGFpbTogKGNsYWltOiBzdHJpbmcpID0+IFVuYXJ5RnVuY3Rpb248T2JzZXJ2YWJsZTxVc2VyPiwgT2JzZXJ2YWJsZTxhbnk+PjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHJlZGlyZWN0VW5hdXRob3JpemVkVG86IChyZWRpcmVjdDogYW55W10pID0+IFVuYXJ5RnVuY3Rpb248T2JzZXJ2YWJsZTxVc2VyPiwgT2JzZXJ2YWJsZTx0cnVlIHwgYW55W10+PjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHJlZGlyZWN0TG9nZ2VkSW5UbzogKHJlZGlyZWN0OiBhbnlbXSkgPT4gVW5hcnlGdW5jdGlvbjxPYnNlcnZhYmxlPFVzZXI+LCBPYnNlcnZhYmxlPHRydWUgfCBhbnlbXT4+O1xuIl19